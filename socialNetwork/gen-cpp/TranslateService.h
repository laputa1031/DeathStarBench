/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TranslateService_H
#define TranslateService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "social_network_types.h"

namespace social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TranslateServiceIf {
 public:
  virtual ~TranslateServiceIf() {}
  virtual void Translate(std::string& _return, const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier) = 0;
};

class TranslateServiceIfFactory {
 public:
  typedef TranslateServiceIf Handler;

  virtual ~TranslateServiceIfFactory() {}

  virtual TranslateServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TranslateServiceIf* /* handler */) = 0;
};

class TranslateServiceIfSingletonFactory : virtual public TranslateServiceIfFactory {
 public:
  TranslateServiceIfSingletonFactory(const ::std::shared_ptr<TranslateServiceIf>& iface) : iface_(iface) {}
  virtual ~TranslateServiceIfSingletonFactory() {}

  virtual TranslateServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TranslateServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<TranslateServiceIf> iface_;
};

class TranslateServiceNull : virtual public TranslateServiceIf {
 public:
  virtual ~TranslateServiceNull() {}
  void Translate(std::string& /* _return */, const int64_t /* req_id */, const std::string& /* text */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _TranslateService_Translate_args__isset {
  _TranslateService_Translate_args__isset() : req_id(false), text(false), carrier(false) {}
  bool req_id :1;
  bool text :1;
  bool carrier :1;
} _TranslateService_Translate_args__isset;

class TranslateService_Translate_args {
 public:

  TranslateService_Translate_args(const TranslateService_Translate_args&);
  TranslateService_Translate_args& operator=(const TranslateService_Translate_args&);
  TranslateService_Translate_args() : req_id(0), text() {
  }

  virtual ~TranslateService_Translate_args() noexcept;
  int64_t req_id;
  std::string text;
  std::map<std::string, std::string>  carrier;

  _TranslateService_Translate_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_text(const std::string& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const TranslateService_Translate_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const TranslateService_Translate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranslateService_Translate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TranslateService_Translate_pargs {
 public:


  virtual ~TranslateService_Translate_pargs() noexcept;
  const int64_t* req_id;
  const std::string* text;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranslateService_Translate_result__isset {
  _TranslateService_Translate_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _TranslateService_Translate_result__isset;

class TranslateService_Translate_result {
 public:

  TranslateService_Translate_result(const TranslateService_Translate_result&);
  TranslateService_Translate_result& operator=(const TranslateService_Translate_result&);
  TranslateService_Translate_result() : success() {
  }

  virtual ~TranslateService_Translate_result() noexcept;
  std::string success;
  ServiceException se;

  _TranslateService_Translate_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServiceException& val);

  bool operator == (const TranslateService_Translate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const TranslateService_Translate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranslateService_Translate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranslateService_Translate_presult__isset {
  _TranslateService_Translate_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _TranslateService_Translate_presult__isset;

class TranslateService_Translate_presult {
 public:


  virtual ~TranslateService_Translate_presult() noexcept;
  std::string* success;
  ServiceException se;

  _TranslateService_Translate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TranslateServiceClient : virtual public TranslateServiceIf {
 public:
  TranslateServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TranslateServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Translate(std::string& _return, const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier);
  void send_Translate(const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier);
  void recv_Translate(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TranslateServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<TranslateServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TranslateServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Translate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TranslateServiceProcessor(::std::shared_ptr<TranslateServiceIf> iface) :
    iface_(iface) {
    processMap_["Translate"] = &TranslateServiceProcessor::process_Translate;
  }

  virtual ~TranslateServiceProcessor() {}
};

class TranslateServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TranslateServiceProcessorFactory(const ::std::shared_ptr< TranslateServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< TranslateServiceIfFactory > handlerFactory_;
};

class TranslateServiceMultiface : virtual public TranslateServiceIf {
 public:
  TranslateServiceMultiface(std::vector<std::shared_ptr<TranslateServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TranslateServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<TranslateServiceIf> > ifaces_;
  TranslateServiceMultiface() {}
  void add(::std::shared_ptr<TranslateServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Translate(std::string& _return, const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Translate(_return, req_id, text, carrier);
    }
    ifaces_[i]->Translate(_return, req_id, text, carrier);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TranslateServiceConcurrentClient : virtual public TranslateServiceIf {
 public:
  TranslateServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  TranslateServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Translate(std::string& _return, const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier);
  int32_t send_Translate(const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier);
  void recv_Translate(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
